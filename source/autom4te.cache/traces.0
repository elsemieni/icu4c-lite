m4trace:/mingw32/share/aclocal/pkg.m4:58: -1- AC_DEFUN([PKG_PROG_PKG_CONFIG], [m4_pattern_forbid([^_?PKG_[A-Z_]+$])
m4_pattern_allow([^PKG_CONFIG(_(PATH|LIBDIR|SYSROOT_DIR|ALLOW_SYSTEM_(CFLAGS|LIBS)))?$])
m4_pattern_allow([^PKG_CONFIG_(DISABLE_UNINSTALLED|TOP_BUILD_DIR|DEBUG_SPEW)$])
AC_ARG_VAR([PKG_CONFIG], [path to pkg-config utility])
AC_ARG_VAR([PKG_CONFIG_PATH], [directories to add to pkg-config's search path])
AC_ARG_VAR([PKG_CONFIG_LIBDIR], [path overriding pkg-config's built-in search path])

if test "x$ac_cv_env_PKG_CONFIG_set" != "xset"; then
	AC_PATH_TOOL([PKG_CONFIG], [pkg-config])
fi
if test -n "$PKG_CONFIG"; then
	_pkg_min_version=m4_default([$1], [0.9.0])
	AC_MSG_CHECKING([pkg-config is at least version $_pkg_min_version])
	if $PKG_CONFIG --atleast-pkgconfig-version $_pkg_min_version; then
		AC_MSG_RESULT([yes])
	else
		AC_MSG_RESULT([no])
		PKG_CONFIG=""
	fi
fi[]dnl
])
m4trace:/mingw32/share/aclocal/pkg.m4:92: -1- AC_DEFUN([PKG_CHECK_EXISTS], [AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl
if test -n "$PKG_CONFIG" && \
    AC_RUN_LOG([$PKG_CONFIG --exists --print-errors "$1"]); then
  m4_default([$2], [:])
m4_ifvaln([$3], [else
  $3])dnl
fi])
m4trace:/mingw32/share/aclocal/pkg.m4:121: -1- AC_DEFUN([_PKG_SHORT_ERRORS_SUPPORTED], [AC_REQUIRE([PKG_PROG_PKG_CONFIG])
if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then
        _pkg_short_errors_supported=yes
else
        _pkg_short_errors_supported=no
fi[]dnl
])
m4trace:/mingw32/share/aclocal/pkg.m4:139: -1- AC_DEFUN([PKG_CHECK_MODULES], [AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl
AC_ARG_VAR([$1][_CFLAGS], [C compiler flags for $1, overriding pkg-config])dnl
AC_ARG_VAR([$1][_LIBS], [linker flags for $1, overriding pkg-config])dnl

pkg_failed=no
AC_MSG_CHECKING([for $2])

_PKG_CONFIG([$1][_CFLAGS], [cflags], [$2])
_PKG_CONFIG([$1][_LIBS], [libs], [$2])

m4_define([_PKG_TEXT], [Alternatively, you may set the environment variables $1[]_CFLAGS
and $1[]_LIBS to avoid the need to call pkg-config.
See the pkg-config man page for more details.])

if test $pkg_failed = yes; then
        AC_MSG_RESULT([no])
        _PKG_SHORT_ERRORS_SUPPORTED
        if test $_pkg_short_errors_supported = yes; then
	        $1[]_PKG_ERRORS=`$PKG_CONFIG --short-errors --print-errors --cflags --libs "$2" 2>&1`
        else
	        $1[]_PKG_ERRORS=`$PKG_CONFIG --print-errors --cflags --libs "$2" 2>&1`
        fi
	# Put the nasty error message in config.log where it belongs
	echo "$$1[]_PKG_ERRORS" >&AS_MESSAGE_LOG_FD

	m4_default([$4], [AC_MSG_ERROR(
[Package requirements ($2) were not met:

$$1_PKG_ERRORS

Consider adjusting the PKG_CONFIG_PATH environment variable if you
installed software in a non-standard prefix.

_PKG_TEXT])[]dnl
        ])
elif test $pkg_failed = untried; then
        AC_MSG_RESULT([no])
	m4_default([$4], [AC_MSG_FAILURE(
[The pkg-config script could not be found or is too old.  Make sure it
is in your PATH or set the PKG_CONFIG environment variable to the full
path to pkg-config.

_PKG_TEXT

To get pkg-config, see <http://pkg-config.freedesktop.org/>.])[]dnl
        ])
else
	$1[]_CFLAGS=$pkg_cv_[]$1[]_CFLAGS
	$1[]_LIBS=$pkg_cv_[]$1[]_LIBS
        AC_MSG_RESULT([yes])
	$3
fi[]dnl
])
m4trace:/mingw32/share/aclocal/pkg.m4:208: -1- AC_DEFUN([PKG_CHECK_MODULES_STATIC], [AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl
_save_PKG_CONFIG=$PKG_CONFIG
PKG_CONFIG="$PKG_CONFIG --static"
PKG_CHECK_MODULES($@)
PKG_CONFIG=$_save_PKG_CONFIG[]dnl
])
m4trace:/mingw32/share/aclocal/pkg.m4:226: -1- AC_DEFUN([PKG_INSTALLDIR], [m4_pushdef([pkg_default], [m4_default([$1], ['${libdir}/pkgconfig'])])
m4_pushdef([pkg_description],
    [pkg-config installation directory @<:@]pkg_default[@:>@])
AC_ARG_WITH([pkgconfigdir],
    [AS_HELP_STRING([--with-pkgconfigdir], pkg_description)],,
    [with_pkgconfigdir=]pkg_default)
AC_SUBST([pkgconfigdir], [$with_pkgconfigdir])
m4_popdef([pkg_default])
m4_popdef([pkg_description])
])
m4trace:/mingw32/share/aclocal/pkg.m4:248: -1- AC_DEFUN([PKG_NOARCH_INSTALLDIR], [m4_pushdef([pkg_default], [m4_default([$1], ['${datadir}/pkgconfig'])])
m4_pushdef([pkg_description],
    [pkg-config arch-independent installation directory @<:@]pkg_default[@:>@])
AC_ARG_WITH([noarch-pkgconfigdir],
    [AS_HELP_STRING([--with-noarch-pkgconfigdir], pkg_description)],,
    [with_noarch_pkgconfigdir=]pkg_default)
AC_SUBST([noarch_pkgconfigdir], [$with_noarch_pkgconfigdir])
m4_popdef([pkg_default])
m4_popdef([pkg_description])
])
m4trace:/mingw32/share/aclocal/pkg.m4:267: -1- AC_DEFUN([PKG_CHECK_VAR], [AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl
AC_ARG_VAR([$1], [value of $3 for $2, overriding pkg-config])dnl

_PKG_CONFIG([$1], [variable="][$3]["], [$2])
AS_VAR_COPY([$1], [pkg_cv_][$1])

AS_VAR_IF([$1], [""], [$5], [$4])dnl
])
m4trace:acinclude.m4:12: -1- AC_DEFUN([ICU_CHECK_MH_FRAG], [
	AC_CACHE_CHECK(
		[which Makefile fragment to use for ${host}],
		[icu_cv_host_frag],
		[
case "${host}" in
*-*-solaris*)
	if test "$GCC" = yes; then	
		icu_cv_host_frag=mh-solaris-gcc
	else
		icu_cv_host_frag=mh-solaris
	fi ;;
alpha*-*-linux-gnu)
	if test "$GCC" = yes; then
		icu_cv_host_frag=mh-alpha-linux-gcc
	else
		icu_cv_host_frag=mh-alpha-linux-cc
	fi ;;
powerpc*-*-linux*)
	if test "$GCC" = yes; then
		icu_cv_host_frag=mh-linux
	else
		icu_cv_host_frag=mh-linux-va
	fi ;;
*-*-linux*|*-*-gnu|*-*-k*bsd*-gnu|*-*-kopensolaris*-gnu) icu_cv_host_frag=mh-linux ;;
i[[34567]]86-*-cygwin) 
	if test "$GCC" = yes; then
		icu_cv_host_frag=mh-cygwin
	else
		icu_cv_host_frag=mh-cygwin-msvc
	fi ;;
x86_64-*-cygwin) 
	if test "$GCC" = yes; then
		icu_cv_host_frag=mh-cygwin64
	else
		icu_cv_host_frag=mh-cygwin-msvc
	fi ;;
*-*-mingw*)
	if test "$GCC" = yes; then
                AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#ifndef __MINGW64__
#error This is not MinGW64
#endif]])],                        [icu_cv_host_frag=mh-mingw64],
                                   [icu_cv_host_frag=mh-mingw])
	else
	        case "${host}" in
		*-*-mingw*) icu_cv_host_frag=mh-msys-msvc ;;
		*-*-cygwin) icu_cv_host_frag=mh-cygwin-msvc ;;
		esac
	fi ;;
*-*-*bsd*|*-*-dragonfly*) 	icu_cv_host_frag=mh-bsd-gcc ;;
*-*-aix*)
	if test "$GCC" = yes; then
		icu_cv_host_frag=mh-aix-gcc
	else
		icu_cv_host_frag=mh-aix-va
	fi ;;
*-*-hpux*)
	if test "$GCC" = yes; then
		icu_cv_host_frag=mh-hpux-gcc
	else
		case "$CXX" in
		*aCC)    icu_cv_host_frag=mh-hpux-acc ;;
		esac
	fi ;;
*-*ibm-openedition*|*-*-os390*)	icu_cv_host_frag=mh-os390 ;;
*-*-os400*)	icu_cv_host_frag=mh-os400 ;;
*-apple-rhapsody*)	icu_cv_host_frag=mh-darwin ;;
*-apple-darwin*)	icu_cv_host_frag=mh-darwin ;;
*-*-beos)       icu_cv_host_frag=mh-beos ;; 
*-*-haiku)      icu_cv_host_frag=mh-haiku ;; 
*-*-irix*)	icu_cv_host_frag=mh-irix ;;
*-dec-osf*) icu_cv_host_frag=mh-alpha-osf ;;
*-*-nto*)	icu_cv_host_frag=mh-qnx ;;
*-ncr-*)	icu_cv_host_frag=mh-mpras ;;
*) 		icu_cv_host_frag=mh-unknown ;;
esac
		]
	)
])
m4trace:acinclude.m4:94: -1- AC_DEFUN([ICU_PROG_LINK], [
case "${host}" in
    *-*-cygwin*|*-*-mingw*)
        if test "$GCC" != yes && test -n "`link --version 2>&1 | grep 'GNU coreutils'`"; then
            AC_MSG_ERROR([link.exe is not a valid linker. Your PATH is incorrect.
                  Please follow the directions in ICU's readme.])
        fi;;
    *);;
esac])
m4trace:acinclude.m4:109: -1- AC_DEFUN([AC_SEARCH_LIBS_FIRST], [AC_PREREQ([2.13])
AC_CACHE_CHECK([for library containing $1], [ac_cv_search_$1],
[ac_func_search_save_LIBS="$LIBS"
ac_cv_search_$1="no"
for i in $2; do
LIBS="-l$i $5 $ac_func_search_save_LIBS"
AC_TRY_LINK_FUNC([$1],
[ac_cv_search_$1="-l$i"
break])
done
if test "$ac_cv_search_$1" = "no"; then
AC_TRY_LINK_FUNC([$1], [ac_cv_search_$1="none required"])
fi
LIBS="$ac_func_search_save_LIBS"])
if test "$ac_cv_search_$1" != "no"; then
  test "$ac_cv_search_$1" = "none required" || LIBS="$ac_cv_search_$1 $LIBS"
  $3
else :
  $4
fi])
m4trace:acinclude.m4:134: -1- AC_DEFUN([AC_CHECK_64BIT_LIBS], [
    BITS_REQ=nochange
    ENABLE_64BIT_LIBS=unknown
    ## revisit this for cross-compile.
    
    AC_ARG_ENABLE(64bit-libs,
        [  --enable-64bit-libs     (deprecated, use --with-library-bits) build 64-bit libraries [default= platform default]],
        [echo "note, use --with-library-bits instead of --*-64bit-libs"
         case "${enableval}" in
            no|false|32) with_library_bits=32;  ;;
            yes|true|64) with_library_bits=64else32 ;;
            nochange) with_library_bits=nochange; ;;
            *) AC_MSG_ERROR(bad value ${enableval} for '--*-64bit-libs') ;;
            esac]    )
    

    AC_ARG_WITH(library-bits,
        [  --with-library-bits=bits specify how many bits to use for the library (32, 64, 64else32, nochange) [default=nochange]],
        [case "${withval}" in
            ""|nochange) BITS_REQ=$withval ;;
            32|64|64else32) BITS_REQ=$withval ;;
            *) AC_MSG_ERROR(bad value ${withval} for --with-library-bits) ;;
            esac])
        
    # don't use these for cross compiling
    if test "$cross_compiling" = "yes" -a "${BITS_REQ}" != "nochange"; then
        AC_MSG_ERROR([Don't specify bitness when cross compiling. See readme.html for help with cross compilation., and set compiler options manually.])
    fi
    AC_CHECK_SIZEOF([void *])
    AC_MSG_CHECKING([whether runnable 64 bit binaries are built by default])
    case $ac_cv_sizeof_void_p in
        8) DEFAULT_64BIT=yes ;;
        4) DEFAULT_64BIT=no ;;
        *) DEFAULT_64BIT=unknown
    esac
    BITS_GOT=unknown
    
    # 'OK' here means, we can exit any further checking, everything's copa
    BITS_OK=yes

    # do we need to check for buildable/runnable 32 or 64 bit?
    BITS_CHECK_32=no
    BITS_CHECK_64=no
    
    # later, can we run the 32/64 bit binaries so made?
    BITS_RUN_32=no
    BITS_RUN_64=no
    
    if test "$DEFAULT_64BIT" = "yes"; then
        # we get 64 bits by default.
        BITS_GOT=64
        case "$BITS_REQ" in
            32) 
                # need to look for 32 bit support. 
                BITS_CHECK_32=yes
                # not copa.
                BITS_OK=no;;
            # everyone else is happy.
            nochange) ;;
            *) ;;
        esac
    elif test "$DEFAULT_64BIT" = "no"; then
        # not 64 bit by default.
        BITS_GOT=32
        case "$BITS_REQ" in
            64|64else32)
                BITS_CHECK_64=yes
                #BITS_CHECK_32=yes
                BITS_OK=no;;
            nochange) ;;
            *) ;;
        esac
    elif test "$DEFAULT_64BIT" = "unknown"; then
        # cross compiling.
        BITS_GOT=unknown
        case "$BITS_REQ" in
            64|64else32) BITS_OK=no
            BITS_CHECK_32=yes
            BITS_CHECK_64=yes ;;
            32) BITS_OK=no;;
            nochange) ;;
            *) ;;
        esac
    fi
            
    AC_MSG_RESULT($DEFAULT_64BIT);

    if test "$BITS_OK" != "yes"; then
        # not copa. back these up.
        CFLAGS_OLD="${CFLAGS}"
        CXXFLAGS_OLD="${CXXFLAGS}"
        LDFLAGS_OLD="${LDFLAGS}"
        ARFLAGS_OLD="${ARFLAGS}"        
        
        CFLAGS_32="${CFLAGS}"
        CXXFLAGS_32="${CXXFLAGS}"
        LDFLAGS_32="${LDFLAGS}"
        ARFLAGS_32="${ARFLAGS}"        
        
        CFLAGS_64="${CFLAGS}"
        CXXFLAGS_64="${CXXFLAGS}"
        LDFLAGS_64="${LDFLAGS}"
        ARFLAGS_64="${ARFLAGS}"        
        
        CAN_BUILD_64=unknown
        CAN_BUILD_32=unknown
        # These results can't be cached because is sets compiler flags.
        if test "$BITS_CHECK_64" = "yes"; then
            AC_MSG_CHECKING([how to build 64-bit executables])
            CAN_BUILD_64=no
            ####
            # Find out if we think we can *build* for 64 bit. Doesn't check whether we can run it.
            #  Note, we don't have to actually check if the options work- we'll try them before using them.
            #  So, only try actually testing the options, if you are trying to decide between multiple options.
            # On exit from the following clauses:
            # if CAN_BUILD_64=yes:
            #    *FLAGS are assumed to contain the right settings for 64bit
            # else if CAN_BUILD_64=no: (default)
            #    *FLAGS are assumed to be trashed, and will be reset from *FLAGS_OLD
            
            if test "$GCC" = yes; then
                CFLAGS="${CFLAGS} -m64"
                CXXFLAGS="${CXXFLAGS} -m64"
                AC_COMPILE_IFELSE([AC_LANG_SOURCE([int main(void) {return (sizeof(void*)*8==64)?0:1;}])],
                   CAN_BUILD_64=yes, CAN_BUILD_64=no)
            else
                case "${host}" in
                sparc*-*-solaris*)
                    # 1. try -m64
                    CFLAGS="${CFLAGS} -m64"
                    CXXFLAGS="${CXXFLAGS} -m64"
                    AC_RUN_IFELSE([AC_LANG_SOURCE([int main(void) {return (sizeof(void*)*8==64)?0:1;}])],
                       CAN_BUILD_64=yes, CAN_BUILD_64=no, CAN_BUILD_64=unknown)
                    if test "$CAN_BUILD_64" != yes; then
                        # Nope. back out changes.
                        CFLAGS="${CFLAGS_OLD}"
                        CXXFLAGS="${CXXFLAGS_OLD}"
                        # 2. try xarch=v9 [deprecated]
                        ## TODO: cross compile: the following won't work.
                        SPARCV9=`isainfo -n 2>&1 | grep sparcv9`
                        SOL64=`$CXX -xarch=v9 2>&1 && $CC -xarch=v9 2>&1 | grep -v usage:`
                        # "Warning: -xarch=v9 is deprecated, use -m64 to create 64-bit programs"
                        if test -z "$SOL64" && test -n "$SPARCV9"; then
                            CFLAGS="${CFLAGS} -xtarget=ultra -xarch=v9"
                            CXXFLAGS="${CXXFLAGS} -xtarget=ultra -xarch=v9"
                            LDFLAGS="${LDFLAGS} -xtarget=ultra -xarch=v9"
                            CAN_BUILD_64=yes
                        fi
                    fi
                    ;;
                i386-*-solaris*)
                    # 1. try -m64
                    CFLAGS="${CFLAGS} -m64"
                    CXXFLAGS="${CXXFLAGS} -m64"
                    AC_RUN_IFELSE([AC_LANG_SOURCE([int main(void) {return (sizeof(void*)*8==64)?0:1;}])],
                       CAN_BUILD_64=yes, CAN_BUILD_64=no, CAN_BUILD_64=unknown)
                    if test "$CAN_BUILD_64" != yes; then
                        # Nope. back out changes.
                        CFLAGS="${CFLAGS_OLD}"
                        CXXFLAGS="${CXXFLAGS_OLD}"
                        # 2. try the older compiler option
                        ## TODO: cross compile problem
                        AMD64=`isainfo -n 2>&1 | grep amd64`
                        SOL64=`$CXX -xtarget=generic64 2>&1 && $CC -xtarget=generic64 2>&1 | grep -v usage:`
                        if test -z "$SOL64" && test -n "$AMD64"; then
                            CFLAGS="${CFLAGS} -xtarget=generic64"
                            CXXFLAGS="${CXXFLAGS} -xtarget=generic64"
                            CAN_BUILD_64=yes
                        fi
                    fi
                    ;;
                ia64-*-linux*)
                    # check for ecc/ecpc compiler support
                    ## TODO: cross compiler problem
                    if test -n "`$CXX --help 2>&1 && $CC --help 2>&1 | grep -v Intel`"; then
                        if test -n "`$CXX --help 2>&1 && $CC --help 2>&1 | grep -v Itanium`"; then
                            CAN_BUILD_64=yes
                        fi
                    fi
                    ;;
                *-*-cygwin)
                    # vcvarsamd64.bat should have been used to enable 64-bit builds.
                    # We only do this check to display the correct answer.
                    ## TODO: cross compiler problem
                    if test -n "`$CXX -help 2>&1 | grep 'for x64'`"; then
                        CAN_BUILD_64=yes
                    fi
                    ;;
                *-*-aix*|powerpc64-*-linux*)
                    CFLAGS="${CFLAGS} -q64"
                    CXXFLAGS="${CXXFLAGS} -q64"
                    LDFLAGS="${LDFLAGS} -q64"
                    AC_COMPILE_IFELSE([AC_LANG_SOURCE([int main(void) {return (sizeof(void*)*8==64)?0:1;}])],
                       CAN_BUILD_64=yes, CAN_BUILD_64=no)
                    if test "$CAN_BUILD_64" = yes; then
                        # worked- set other options.
                        case "${host}" in
                        *-*-aix*)
                            # tell AIX what executable mode to use.
                            ARFLAGS="${ARFLAGS} -X64"
                        esac
                    fi
                    ;;
                *-*-hpux*)
                    # First we try the newer +DD64, if that doesn't work,
                    # try other options.

                    CFLAGS="${CFLAGS} +DD64"
                    CXXFLAGS="${CXXFLAGS} +DD64"
                    AC_COMPILE_IFELSE([AC_LANG_SOURCE([int main(void) {return (sizeof(void*)*8==64)?0:1;}])],
                        CAN_BUILD_64=yes, CAN_BUILD_64=no)
                    if test "$CAN_BUILD_64" != yes; then
                        # reset
                        CFLAGS="${CFLAGS_OLD}"
                        CXXFLAGS="${CXXFLAGS_OLD}"
                        # append
                        CFLAGS="${CFLAGS} +DA2.0W"
                        CXXFLAGS="${CXXFLAGS} +DA2.0W"
                        AC_COMPILE_IFELSE([AC_LANG_SOURCE([int main(void) {return (sizeof(void*)*8==64)?0:1;}])],
                            CAN_BUILD_64=yes, CAN_BUILD_64=no)
                    fi
                    ;;
                *-*ibm-openedition*|*-*-os390*)
                    CFLAGS="${CFLAGS} -Wc,lp64"
                    CXXFLAGS="${CXXFLAGS} -Wc,lp64"
                    LDFLAGS="${LDFLAGS} -Wl,lp64"
                    AC_COMPILE_IFELSE([AC_LANG_SOURCE([int main(void) {return (sizeof(void*)*8==64)?0:1;}])],
                       CAN_BUILD_64=yes, CAN_BUILD_64=no)
                    ;;
                *)
                    # unknown platform.
                    ;;
                esac
            fi
            AC_MSG_RESULT($CAN_BUILD_64)
            if test "$CAN_BUILD_64" = yes; then
                AC_MSG_CHECKING([whether runnable 64-bit binaries are being built ])
                AC_RUN_IFELSE([AC_LANG_SOURCE([int main(void) {return (sizeof(void*)*8==64)?0:1;}])],
                   BITS_RUN_64=yes, BITS_RUN_64=no, BITS_RUN_64=unknown)
                AC_MSG_RESULT($BITS_RUN_64);

                CFLAGS_64="${CFLAGS}"
                CXXFLAGS_64="${CXXFLAGS}"
                LDFLAGS_64="${LDFLAGS}"
                ARFLAGS_64="${ARFLAGS}"        
            fi
            # put it back.
            CFLAGS="${CFLAGS_OLD}"
            CXXFLAGS="${CXXFLAGS_OLD}"
            LDFLAGS="${LDFLAGS_OLD}"
            ARFLAGS="${ARFLAGS_OLD}"     
        fi
        if test "$BITS_CHECK_32" = "yes"; then
            # see comment under 'if BITS_CHECK_64', above.
            AC_MSG_CHECKING([how to build 32-bit executables])
            if test "$GCC" = yes; then
                CFLAGS="${CFLAGS} -m32"
                CXXFLAGS="${CXXFLAGS} -m32"
                AC_COMPILE_IFELSE([AC_LANG_SOURCE([int main(void) {return (sizeof(void*)*8==32)?0:1;}])],
                   CAN_BUILD_32=yes, CAN_BUILD_32=no)
            fi
            AC_MSG_RESULT($CAN_BUILD_32)
            if test "$CAN_BUILD_32" = yes; then
                AC_MSG_CHECKING([whether runnable 32-bit binaries are being built ])
                AC_RUN_IFELSE([AC_LANG_SOURCE([int main(void) {return (sizeof(void*)*8==32)?0:1;}])],
                   BITS_RUN_32=yes, BITS_RUN_32=no, BITS_RUN_32=unknown)
                AC_MSG_RESULT($BITS_RUN_32);
                CFLAGS_32="${CFLAGS}"
                CXXFLAGS_32="${CXXFLAGS}"
                LDFLAGS_32="${LDFLAGS}"
                ARFLAGS_32="${ARFLAGS}"        
            fi
            # put it back.
            CFLAGS="${CFLAGS_OLD}"
            CXXFLAGS="${CXXFLAGS_OLD}"
            LDFLAGS="${LDFLAGS_OLD}"
            ARFLAGS="${ARFLAGS_OLD}"     
        fi
        
        ##
        # OK. Now, we've tested for 32 and 64 bitness. Let's see what we'll do.
        #
        
        # First, implement 64else32
        if test "$BITS_REQ" = "64else32"; then
            if test "$BITS_RUN_64" = "yes"; then
                BITS_REQ=64
            else
                # no changes.
                BITS_OK=yes 
            fi
        fi
        
        # implement.
        if test "$BITS_REQ" = "32" -a "$BITS_RUN_32" = "yes"; then
            CFLAGS="${CFLAGS_32}"
            CXXFLAGS="${CXXFLAGS_32}"
            LDFLAGS="${LDFLAGS_32}"
            ARFLAGS="${ARFLAGS_32}"     
            BITS_OK=yes
        elif test "$BITS_REQ" = "64" -a "$BITS_RUN_64" = "yes"; then
            CFLAGS="${CFLAGS_64}"
            CXXFLAGS="${CXXFLAGS_64}"
            LDFLAGS="${LDFLAGS_64}"
            ARFLAGS="${ARFLAGS_64}"     
            BITS_OK=yes
        elif test "$BITS_OK" != "yes"; then
            AC_MSG_ERROR([Requested $BITS_REQ bit binaries but could not compile and execute them. See readme.html for help with cross compilation., and set compiler options manually.])
        fi
     fi
])
m4trace:acinclude.m4:448: -1- AC_DEFUN([AC_CHECK_STRICT_COMPILE], [
    AC_MSG_CHECKING([whether strict compiling is on])
    AC_ARG_ENABLE(strict,[  --enable-strict         compile with strict compiler options [default=yes]], [
        if test "$enableval" = no
        then
            ac_use_strict_options=no
        else
            ac_use_strict_options=yes
        fi
      ], [ac_use_strict_options=yes])
    AC_MSG_RESULT($ac_use_strict_options)

    if test "$ac_use_strict_options" = yes
    then
        if test "$GCC" = yes
        then
            case "${host}" in
            *-*-solaris*)
                # Don't use -std=c11 on Solaris because of timezone check fails
                ;;
            *)
                # Do not use -ansi. It limits us to C90, and it breaks some platforms.
                # We use -std=c11 to disable the gnu99 defaults and its associated warnings
                CFLAGS="$CFLAGS -std=c11"
                ;;
            esac
            
            CFLAGS="$CFLAGS -Wall -pedantic -Wshadow -Wpointer-arith -Wmissing-prototypes -Wwrite-strings"
        else
            case "${host}" in
            *-*-cygwin)
                if test "`$CC /help 2>&1 | head -c9`" = "Microsoft"
                then
                    CFLAGS="$CFLAGS /W4"
                fi ;;
            *-*-mingw*)
                CFLAGS="$CFLAGS -W4" ;;
            esac
        fi
        if test "$GXX" = yes
        then
            CXXFLAGS="$CXXFLAGS -W -Wall -pedantic -Wpointer-arith -Wwrite-strings -Wno-long-long"
        else
            case "${host}" in
            *-*-cygwin)
                if test "`$CXX /help 2>&1 | head -c9`" = "Microsoft"
                then
                    CXXFLAGS="$CXXFLAGS /W4"
                fi ;;
            *-*-mingw*)
                CFLAGS="$CFLAGS -W4" ;;
            esac
        fi
    fi
])
m4trace:configure.ac:13: -1- m4_pattern_forbid([^_?A[CHUM]_])
m4trace:configure.ac:13: -1- m4_pattern_forbid([_AC_])
m4trace:configure.ac:13: -1- m4_pattern_forbid([^LIBOBJS$], [do not use LIBOBJS directly, use AC_LIBOBJ (see section `AC_LIBOBJ vs LIBOBJS'])
m4trace:configure.ac:13: -1- m4_pattern_allow([^AS_FLAGS$])
m4trace:configure.ac:13: -1- m4_pattern_forbid([^_?m4_])
m4trace:configure.ac:13: -1- m4_pattern_forbid([^dnl$])
m4trace:configure.ac:13: -1- m4_pattern_forbid([^_?AS_])
m4trace:configure.ac:13: -1- m4_pattern_allow([^SHELL$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PATH_SEPARATOR$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_NAME$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_TARNAME$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_VERSION$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_STRING$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_BUGREPORT$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_URL$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^exec_prefix$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^prefix$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^program_transform_name$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^bindir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^sbindir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^libexecdir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^datarootdir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^datadir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^sysconfdir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^sharedstatedir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^localstatedir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^includedir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^oldincludedir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^docdir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^infodir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^htmldir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^dvidir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^pdfdir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^psdir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^libdir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^localedir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^mandir$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_NAME$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_TARNAME$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_VERSION$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_STRING$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_BUGREPORT$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^PACKAGE_URL$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^DEFS$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^ECHO_C$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^ECHO_N$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^ECHO_T$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^build_alias$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^host_alias$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^target_alias$])
m4trace:configure.ac:19: -1- AC_CONFIG_MACRO_DIR([config/m4])
m4trace:configure.ac:23: -1- m4_pattern_allow([^PACKAGE$])
m4trace:configure.ac:39: -1- m4_pattern_allow([^ICU_ECHO_N$])
m4trace:configure.ac:40: -1- m4_pattern_allow([^ICU_ECHO_C$])
m4trace:configure.ac:41: -1- m4_pattern_allow([^ICU_ECHO_T$])
m4trace:configure.ac:72: -1- m4_pattern_allow([^VERSION$])
m4trace:configure.ac:73: -1- m4_pattern_allow([^LIB_VERSION$])
m4trace:configure.ac:74: -1- m4_pattern_allow([^LIB_VERSION_MAJOR$])
m4trace:configure.ac:77: -1- m4_pattern_allow([^UNICODE_VERSION$])
m4trace:configure.ac:80: -1- m4_pattern_allow([^build$])
m4trace:configure.ac:80: -1- m4_pattern_allow([^build_cpu$])
m4trace:configure.ac:80: -1- m4_pattern_allow([^build_vendor$])
m4trace:configure.ac:80: -1- m4_pattern_allow([^build_os$])
m4trace:configure.ac:80: -1- m4_pattern_allow([^host$])
m4trace:configure.ac:80: -1- m4_pattern_allow([^host_cpu$])
m4trace:configure.ac:80: -1- m4_pattern_allow([^host_vendor$])
m4trace:configure.ac:80: -1- m4_pattern_allow([^host_os$])
m4trace:configure.ac:82: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:115: -1- m4_pattern_allow([^ENABLE_DEBUG$])
m4trace:configure.ac:129: -1- m4_pattern_allow([^ENABLE_RELEASE$])
m4trace:configure.ac:136: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:136: -1- m4_pattern_allow([^CFLAGS$])
m4trace:configure.ac:136: -1- m4_pattern_allow([^LDFLAGS$])
m4trace:configure.ac:136: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:136: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:136: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:136: -1- m4_pattern_allow([^ac_ct_CC$])
m4trace:configure.ac:136: -1- m4_pattern_allow([^EXEEXT$])
m4trace:configure.ac:136: -1- m4_pattern_allow([^OBJEXT$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXX$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXXFLAGS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LDFLAGS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^CXX$])
m4trace:configure.ac:139: -1- m4_pattern_allow([^ac_ct_CXX$])
m4trace:configure.ac:142: -1- PKG_PROG_PKG_CONFIG([0.20])
m4trace:configure.ac:142: -1- m4_pattern_forbid([^_?PKG_[A-Z_]+$])
m4trace:configure.ac:142: -1- m4_pattern_allow([^PKG_CONFIG(_(PATH|LIBDIR|SYSROOT_DIR|ALLOW_SYSTEM_(CFLAGS|LIBS)))?$])
m4trace:configure.ac:142: -1- m4_pattern_allow([^PKG_CONFIG_(DISABLE_UNINSTALLED|TOP_BUILD_DIR|DEBUG_SPEW)$])
m4trace:configure.ac:142: -1- m4_pattern_allow([^PKG_CONFIG$])
m4trace:configure.ac:142: -1- m4_pattern_allow([^PKG_CONFIG_PATH$])
m4trace:configure.ac:142: -1- m4_pattern_allow([^PKG_CONFIG_LIBDIR$])
m4trace:configure.ac:142: -1- m4_pattern_allow([^PKG_CONFIG$])
m4trace:configure.ac:143: -1- PKG_CHECK_MODULES([ICULEHB], [icu-le-hb], [have_icu_le_hb=true], [:])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ICULEHB_CFLAGS$])
m4trace:configure.ac:143: -1- m4_pattern_allow([^ICULEHB_LIBS$])
m4trace:configure.ac:143: -1- PKG_CHECK_EXISTS([icu-le-hb], [pkg_cv_[]ICULEHB_CFLAGS=`$PKG_CONFIG --[]cflags "icu-le-hb" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:143: -1- PKG_CHECK_EXISTS([icu-le-hb], [pkg_cv_[]ICULEHB_LIBS=`$PKG_CONFIG --[]libs "icu-le-hb" 2>/dev/null`
		      test "x$?" != "x0" && pkg_failed=yes ], [pkg_failed=yes])
m4trace:configure.ac:143: -1- _PKG_SHORT_ERRORS_SUPPORTED
m4trace:configure.ac:166: -1- m4_pattern_allow([^CPP$])
m4trace:configure.ac:166: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:166: -1- m4_pattern_allow([^CPP$])
m4trace:configure.ac:168: -1- m4_pattern_allow([^INSTALL_PROGRAM$])
m4trace:configure.ac:168: -1- m4_pattern_allow([^INSTALL_SCRIPT$])
m4trace:configure.ac:168: -1- m4_pattern_allow([^INSTALL_DATA$])
m4trace:configure.ac:170: -1- m4_pattern_allow([^cross_compiling$])
m4trace:configure.ac:189: -1- m4_pattern_allow([^U_MAKE$])
m4trace:configure.ac:190: -1- m4_pattern_allow([^U_MAKE$])
m4trace:configure.ac:214: -1- m4_pattern_allow([^cross_buildroot$])
m4trace:configure.ac:217: -1- m4_pattern_allow([^DOXYGEN$])
m4trace:configure.ac:220: -1- ICU_PROG_LINK
m4trace:configure.ac:232: -1- m4_pattern_allow([^EXEEXT$])
m4trace:configure.ac:235: -1- AC_CHECK_STRICT_COMPILE
m4trace:configure.ac:238: -1- AC_CHECK_64BIT_LIBS
m4trace:configure.ac:238: -1- m4_pattern_allow([^GREP$])
m4trace:configure.ac:238: -1- m4_pattern_allow([^EGREP$])
m4trace:configure.ac:238: -1- m4_pattern_allow([^STDC_HEADERS$])
m4trace:configure.ac:238: -1- m4_pattern_allow([^SIZEOF_VOID_P$])
m4trace:configure.ac:239: -1- m4_pattern_allow([^ARFLAGS$])
m4trace:configure.ac:240: -1- m4_pattern_allow([^COMPILE_LINK_ENVVAR$])
m4trace:configure.ac:243: -1- ICU_CHECK_MH_FRAG
m4trace:configure.ac:251: -1- m4_pattern_allow([^HAVE_LIBM$])
m4trace:configure.ac:254: -1- m4_pattern_allow([^LIB_M$])
m4trace:configure.ac:269: -1- m4_pattern_allow([^ENABLE_SHARED$])
m4trace:configure.ac:283: -1- m4_pattern_allow([^ENABLE_STATIC$])
m4trace:configure.ac:332: -1- m4_pattern_allow([^UCLN_NO_AUTO_CLEANUP$])
m4trace:configure.ac:370: -1- m4_pattern_allow([^U_DEFAULT_SHOW_DRAFT$])
m4trace:configure.ac:372: -1- m4_pattern_allow([^RANLIB$])
m4trace:configure.ac:375: -1- m4_pattern_allow([^SED$])
m4trace:configure.ac:378: -1- m4_pattern_allow([^AR$])
m4trace:configure.ac:394: -1- m4_pattern_allow([^U_DISABLE_RENAMING$])
m4trace:configure.ac:410: -1- m4_pattern_allow([^U_ENABLE_TRACING$])
m4trace:configure.ac:413: -1- m4_pattern_allow([^HAVE_ELF_H$])
m4trace:configure.ac:453: -1- m4_pattern_allow([^U_ENABLE_DYLOAD$])
m4trace:configure.ac:456: -1- m4_pattern_allow([^HAVE_DLFCN_H$])
m4trace:configure.ac:459: -1- m4_pattern_allow([^HAVE_DLOPEN$])
m4trace:configure.ac:469: -1- m4_pattern_allow([^HAVE_GETTIMEOFDAY$])
m4trace:configure.ac:482: -1- m4_pattern_allow([^ENABLE_RPATH$])
m4trace:configure.ac:531: -1- m4_pattern_allow([^U_HAVE_ATOMIC$])
m4trace:configure.ac:544: -1- m4_pattern_allow([^HAVE_LIBPTHREAD$])
m4trace:configure.ac:554: -1- AC_SEARCH_LIBS_FIRST([pthread_mutex_destroy], [pthread pthreads c_r ])
m4trace:configure.ac:560: -1- m4_pattern_allow([^HAVE_LIBPTHREAD$])
m4trace:configure.ac:612: -1- m4_pattern_allow([^LIB_THREAD$])
m4trace:configure.ac:632: -1- m4_pattern_allow([^HAVE_MMAP$])
m4trace:configure.ac:668: -1- m4_pattern_allow([^GENCCODE_ASSEMBLY$])
m4trace:configure.ac:673: -1- m4_pattern_allow([^HAVE_INTTYPES_H$])
m4trace:configure.ac:688: -1- m4_pattern_allow([^U_HAVE_INTTYPES_H$])
m4trace:configure.ac:690: -1- m4_pattern_allow([^HAVE_DIRENT_H$])
m4trace:configure.ac:698: -1- m4_pattern_allow([^U_HAVE_DIRENT_H$])
m4trace:configure.ac:701: -1- m4_pattern_allow([^WORDS_BIGENDIAN$])
m4trace:configure.ac:701: -1- m4_pattern_allow([^AC_APPLE_UNIVERSAL_BUILD$])
m4trace:configure.ac:709: -1- m4_pattern_allow([^U_IS_BIG_ENDIAN$])
m4trace:configure.ac:735: -1- m4_pattern_allow([^U_HAVE_NL_LANGINFO_CODESET$])
m4trace:configure.ac:736: -1- m4_pattern_allow([^U_NL_LANGINFO_CODESET$])
m4trace:configure.ac:792: -1- m4_pattern_allow([^U_OVERRIDE_CXX_ALLOCATION$])
m4trace:configure.ac:793: -1- m4_pattern_allow([^U_HAVE_PLACEMENT_NEW$])
m4trace:configure.ac:804: -1- m4_pattern_allow([^U_HAVE_POPEN$])
m4trace:configure.ac:822: -1- m4_pattern_allow([^U_HAVE_TZSET$])
m4trace:configure.ac:823: -1- m4_pattern_allow([^U_TZSET$])
m4trace:configure.ac:850: -1- m4_pattern_allow([^U_HAVE_TZNAME$])
m4trace:configure.ac:851: -1- m4_pattern_allow([^U_TZNAME$])
m4trace:configure.ac:880: -1- m4_pattern_allow([^U_HAVE_TIMEZONE$])
m4trace:configure.ac:881: -1- m4_pattern_allow([^U_TIMEZONE$])
m4trace:configure.ac:899: -1- m4_pattern_allow([^U_HAVE_STRTOD_L$])
m4trace:configure.ac:902: -1- m4_pattern_allow([^int8_t$])
m4trace:configure.ac:903: -1- m4_pattern_allow([^uint8_t$])
m4trace:configure.ac:904: -1- m4_pattern_allow([^int16_t$])
m4trace:configure.ac:905: -1- m4_pattern_allow([^uint16_t$])
m4trace:configure.ac:906: -1- m4_pattern_allow([^int32_t$])
m4trace:configure.ac:907: -1- m4_pattern_allow([^uint32_t$])
m4trace:configure.ac:908: -1- m4_pattern_allow([^int64_t$])
m4trace:configure.ac:909: -1- m4_pattern_allow([^uint64_t$])
m4trace:configure.ac:951: -1- m4_pattern_allow([^HAVE_WCHAR_H$])
m4trace:configure.ac:962: -1- m4_pattern_allow([^U_HAVE_WCHAR_H$])
m4trace:configure.ac:963: -1- m4_pattern_allow([^U_HAVE_WCSCPY$])
m4trace:configure.ac:965: -1- m4_pattern_allow([^SIZEOF_WCHAR_T$])
m4trace:configure.ac:1150: -1- m4_pattern_allow([^pkgicudatadir$])
m4trace:configure.ac:1151: -1- m4_pattern_allow([^thepkgicudatadir$])
m4trace:configure.ac:1201: -1- m4_pattern_allow([^DATA_PACKAGING_MODE$])
m4trace:configure.ac:1214: -1- m4_pattern_allow([^ICULIBSUFFIX$])
m4trace:configure.ac:1223: -1- m4_pattern_allow([^U_HAVE_LIB_SUFFIX$])
m4trace:configure.ac:1224: -1- m4_pattern_allow([^ICULIBSUFFIXCNAME$])
m4trace:configure.ac:1279: -1- m4_pattern_allow([^ICUDATA_CHAR$])
m4trace:configure.ac:1280: -1- m4_pattern_allow([^platform$])
m4trace:configure.ac:1283: -1- m4_pattern_allow([^platform_make_fragment_name$])
m4trace:configure.ac:1284: -1- m4_pattern_allow([^platform_make_fragment$])
m4trace:configure.ac:1310: -1- m4_pattern_allow([^LIBCFLAGS$])
m4trace:configure.ac:1311: -1- m4_pattern_allow([^LIBCXXFLAGS$])
m4trace:configure.ac:1387: -1- m4_pattern_allow([^LIB@&t@OBJS$])
m4trace:configure.ac:1387: -1- m4_pattern_allow([^LTLIBOBJS$])
m4trace:configure.ac:1387: -1- _m4_warn([obsolete], [AC_C_BIGENDIAN should be used with AC_CONFIG_HEADERS], [])
m4trace:configure.ac:1415: -1- m4_pattern_allow([^UCONFIG_CPPFLAGS$])
m4trace:configure.ac:1453: -1- m4_pattern_allow([^UCONFIG_CFLAGS$])
m4trace:configure.ac:1457: -1- m4_pattern_allow([^UCONFIG_CXXFLAGS$])
